{"version":3,"sources":["../../src/controllers/imageProcess.js"],"names":["cloudinary","config","cloud_name","api_key","api_secret","UserController","uploadImage","req","res","next","finalImageUrls","errors","form","formidable","IncomingForm","parse","err","fields","files","file","substr","lastIndexOf","toLowerCase","status","json","error","message","fs","readFile","path","data","myDir","__dirname","existsSync","mkdirSync","directory","zip","AdmZip","zipEntries","getEntries","extractAllTo","productIDS","forEach","zipEntry","key","imageFlag","isDirectory","name","productID","split","push","Pid","entry","entryName","validImages","db","products","findAll","then","product","_","map","val","filter","index","ProductID","remove","cloudImageUrls","final_response","callback","length","image","splice","imageUrl","hostname","uploader","upload","result","console","log","url","ProductId","update","ImageFullsizeURL","where","updatedImages","uploadMp4","writeFile","resp","mp4Url","v2","resource_type","resultData","mp4Files","create","final_resp","handleErrorResponse","getMp4","BaseAPIController","controller"],"mappings":"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","file":"imageProcess.js","sourcesContent":["import BaseAPIController from \"./BaseAPIController\";\nimport db from '../db.js'\nimport AdmZip from 'adm-zip';\nimport fs from \"fs\";\nimport formidable from \"formidable\";\nimport cloudinary from 'cloudinary';\nimport rmdir from 'rimraf';\nimport _ from \"lodash\";\n\ncloudinary.config({\n    cloud_name: 'dtgbbrxs0',\n    api_key: '296789734731114',\n    api_secret: 'FNqRNKXgicTjVfaEj39DjsDDBEY'\n});\nexport class UserController extends BaseAPIController {\n    uploadImage = (req, res, next) => {\n        let finalImageUrls = [];\n        let errors = []\n        let form = new formidable.IncomingForm();\n        form.parse(req, function(err, fields, files) {\n\n            if (files.file) {\n                if (files.file['name'].substr(files.file['name'].lastIndexOf('.') + 1).toLowerCase() != 'zip') {\n                    res.status(400).json({ error: 1, message: \"please upload zip file\" })\n                } else {\n                    fs.readFile(files.file.path, function(err, data) {\n                        let myDir = __dirname + \"/files\";\n                        if (!fs.existsSync(myDir)) {\n                            fs.mkdirSync(myDir);\n                        }\n                        let directory = '';\n                        let zip = new AdmZip(data);\n                        let zipEntries = zip.getEntries();\n                        zip.extractAllTo(myDir, true);\n                        let productIDS = []\n                        zipEntries.forEach(function(zipEntry, key) {\n                            let imageFlag = false;\n                            if (!zipEntry.isDirectory) {\n                                if (zipEntry.name) {\n                                    let productID = zipEntry.name.split(\".\");\n                                    productIDS.push({ Pid: productID[0], entry: zipEntry.entryName })\n                                }\n                            } else {\n                                directory = zipEntry.entryName\n                            }\n                        });\n                        let validImages = []\n                        let errors = []\n                        db.products.findAll({}).then((product) => {\n                            _.map(product, (val, key) => {\n                                _.filter(productIDS, function(index) {\n                                    // console.log(index, val.ProductID, \"kokokoko\")\n                                    if (index.Pid == val.ProductID) {\n                                        validImages.push(index)\n                                    }\n                                });\n                            });\n                            _.map(product, (val, key) => {\n                                _.remove(productIDS, function(index) {\n                                    return (index.Pid == val.ProductID)\n                                })\n                            })\n\n                            cloudImageUrls(validImages, directory, function(final_response) {\n                                res.json({ status: 1, data: final_response, errors: productIDS })\n                            })\n\n                            function cloudImageUrls(validImages, directory, callback) {\n                                if (validImages.length) {\n                                    let image = validImages.splice(0, 1)[0];\n                                    let imageUrl = `http://${req.hostname}:5001/controllers/files/${image.entry}`;\n                                    cloudinary.uploader.upload(imageUrl, function(result) {\n                                        console.log(result.url)\n                                        if (result) {\n                                            finalImageUrls.push({ imageUrl: result.url, ProductId: image.Pid })\n                                            db.products.update({ ImageFullsizeURL: result.url }, { where: { productID: image.Pid } }).then((updatedImages) => {\n                                                console.log(updatedImages)\n                                            })\n                                            if (validImages.length) {\n                                                cloudImageUrls(validImages, directory, callback)\n                                            } else {\n                                                callback(finalImageUrls)\n                                            }\n                                        }\n                                        //     //     rmdir(myDir + '/' + directory, function(error, data) {\n                                        //     //         console.log(err)\n                                        //     //     });\n                                        // }\n                                    });\n                                } else {\n                                    callback(finalImageUrls)\n                                }\n                            }\n                        })\n\n                    })\n                }\n            } else {\n                res.status(400).json({ error: 1, message: \"file not recieved\" })\n            }\n        })\n    }\n\n\n    uploadMp4 = (req, res, next) => {\n        let form = new formidable.IncomingForm();\n        form.parse(req, function(err, fields, files) {\n            if (files.file) {\n                if (files.file['name'].substr(files.file['name'].lastIndexOf('.') + 1).toLowerCase() != 'mp4') {\n                    res.status(400).json({ error: 1, message: \"please upload mp4 file\" })\n                } else {\n                    fs.readFile(files.file.path, function(err, data) {\n                        let myDir = __dirname + \"/files\";\n                        if (!fs.existsSync(myDir)) {\n                            fs.mkdirSync(myDir);\n                        }\n                        fs.writeFile(myDir + `/${files.file.name}`, data, function(err, resp) {\n                            if (err) {\n                                console.log(err)\n                            } else {\n                                let mp4Url = `http://${req.hostname}:5001/controllers/files/${files.file.name}`;\n                                cloudinary.v2.uploader.upload(mp4Url, { resource_type: \"video\" }, function(error, result) {\n                                    if (err) {\n                                        res.status(400).json({ error: 1, data: err })\n                                    } else {\n                                        console.log(result.url)\n                                        let resultData = {\n                                            \"cloudUrl\": result.url\n                                        }\n                                        db.mp4Files.create(resultData).then((final_resp) => {\n                                            res.json({ status: 1, data: final_resp })\n                                        }, (err) => this.handleErrorResponse(res, err))\n                                    }\n                                });\n                            }\n                        });\n\n                    })\n                }\n            }\n        })\n    }\n\n    getMp4 = (req, res, next) => {\n        db.mp4Files.findAll({}).then((data) => {\n            res.json({ status: 1, data: data })\n        }, (err) => this.handleErrorResponse(res, err))\n    }\n\n}\n\nconst controller = new UserController();\nexport default controller;"]}