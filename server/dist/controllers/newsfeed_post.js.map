{"version":3,"sources":["../../src/controllers/newsfeed_post.js"],"names":["newsfeed_postController","createNewsfeedPost","req","res","next","db","newsfeed_post","create","body","then","data","json","status","err","handleErrorResponse","getNewsfeedPost","finalData","count","findAll","limit","parseInt","params","offset","page","JSON","parse","stringify","getUserData","resp","totalCount","callback","length","newsFeed","splice","users","findOne","where","id","userID","user","userData","push","updateNewsfeedPost","update","response","deleteNewsfeedPost","destroy","NewsfeedPostwithProducts","products","product1ID","product2ID","product3ID","product4ID","ProductID","BaseAPIController","controller"],"mappings":"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","file":"newsfeed_post.js","sourcesContent":["import BaseAPIController from \"./BaseAPIController\";\nimport provideUser from \"../providers/user\";\nimport db from '../db.js'\nexport class newsfeed_postController extends BaseAPIController {\n\n    createNewsfeedPost = (req, res, next) => {\n        db.newsfeed_post.create(req.body).then((data) => {\n            res.json({ status: 1, data: data })\n        }, (err) => this.handleErrorResponse(res, err))\n    }\n\n    getNewsfeedPost = (req, res, next) => {\n        let finalData = []\n        db.newsfeed_post.count({}).then((count) => {\n            db.newsfeed_post.findAll({ limit: parseInt(req.params.limit), offset: parseInt(req.params.limit) * parseInt(req.params.page - 1) }).then((data) => {\n                data = JSON.parse(JSON.stringify(data));\n                getUserData(data, function(resp) {\n                    res.json({ status: 1, data: resp, totalCount: count })\n                })\n            }, (err) => this.handleErrorResponse(res, err))\n        })\n        let getUserData = (data, callback) => {\n            if (data.length) {\n                let newsFeed = data.splice(0, 1)[0];\n                db.users.findOne({ where: { id: newsFeed.userID } }).then((user) => {\n                    newsFeed.userData = user;\n                    finalData.push(newsFeed)\n                    if (data.length) {\n                        getUserData(data, callback)\n                    } else {\n                        callback(finalData)\n                    }\n                })\n            } else {\n                callback(finalData)\n            }\n        }\n    }\n\n    updateNewsfeedPost = (req, res, next) => {\n        db.newsfeed_post.update(req.body, { where: { id: req.body.id } }).then((response) => {\n            res.json({ status: 1, data: response })\n        }, (err) => this.handleErrorResponse(res, err))\n    }\n\n    deleteNewsfeedPost = (req, res, next) => {\n        db.newsfeed_post.destroy({ where: { id: req.params.id } }).then((response) => {\n            res.json({ status: 1, data: response })\n        }, (err) => this.handleErrorResponse(res, err))\n    }\n\n    NewsfeedPostwithProducts = (req, res, next) => {\n        db.newsfeed_post.findOne({ where: { id: req.params.id } }).then((response) => {\n            let products = [];\n            products.push(response.product1ID, response.product2ID, response.product3ID, response.product4ID)\n\n            db.products.findAll({ where: { ProductID: products } }).then((products) => {\n                response = JSON.parse(JSON.stringify(response));\n                response.products = products\n                if (response.userID) {\n                    db.users.findOne({ where: { id: response.userID } }).then((userData) => {\n                        response.userData = userData\n                        res.json({ status: 1, data: response })\n\n                    })\n                } else {\n                    res.json({ status: 1, data: response })\n                }\n            })\n        }, (err) => this.handleErrorResponse(res, err))\n    }\n\n}\n\nconst controller = new newsfeed_postController();\nexport default controller;"]}