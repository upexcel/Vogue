{"version":3,"sources":["../../src/controllers/newsfeed_post.js"],"names":["newsfeed_postController","createNewsfeedPost","req","res","next","db","newsfeed_post","create","body","then","data","json","status","err","handleErrorResponse","getNewsfeedPost","findAll","limit","parseInt","params","offset","page","updateNewsfeedPost","update","where","id","response","deleteNewsfeedPost","destroy","NewsfeedPostwithProducts","findOne","products","push","product1ID","product2ID","product3ID","product4ID","ProductID","JSON","parse","stringify","BaseAPIController","controller"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;IACaA,uB,WAAAA,uB;;;;;;;;;;;;;;4NAETC,kB,GAAqB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACrCC,yBAAGC,aAAH,CAAiBC,MAAjB,CAAwBL,IAAIM,IAA5B,EAAkCC,IAAlC,CAAuC,UAACC,IAAD,EAAU;AAC7CP,oBAAIQ,IAAJ,CAAS,EAAEC,QAAQ,CAAV,EAAaF,MAAMA,IAAnB,EAAT;AACH,aAFD,EAEG,UAACG,GAAD;AAAA,uBAAS,MAAKC,mBAAL,CAAyBX,GAAzB,EAA8BU,GAA9B,CAAT;AAAA,aAFH;AAGH,S,QAEDE,e,GAAkB,UAACb,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClCC,yBAAGC,aAAH,CAAiBU,OAAjB,CAAyB,EAAEC,OAAOC,SAAShB,IAAIiB,MAAJ,CAAWF,KAApB,CAAT,EAAqCG,QAAQF,SAAShB,IAAIiB,MAAJ,CAAWF,KAApB,IAA6BC,SAAShB,IAAIiB,MAAJ,CAAWE,IAAX,GAAkB,CAA3B,CAA1E,EAAzB,EAAoIZ,IAApI,CAAyI,UAACC,IAAD,EAAU;AAC/IP,oBAAIQ,IAAJ,CAAS,EAAEC,QAAQ,CAAV,EAAaF,MAAMA,IAAnB,EAAT;AACH,aAFD,EAEG,UAACG,GAAD;AAAA,uBAAS,MAAKC,mBAAL,CAAyBX,GAAzB,EAA8BU,GAA9B,CAAT;AAAA,aAFH;AAGH,S,QAEDS,kB,GAAqB,UAACpB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACrCC,yBAAGC,aAAH,CAAiBiB,MAAjB,CAAwBrB,IAAIM,IAA5B,EAAkC,EAAEgB,OAAO,EAAEC,IAAIvB,IAAIM,IAAJ,CAASiB,EAAf,EAAT,EAAlC,EAAkEhB,IAAlE,CAAuE,UAACiB,QAAD,EAAc;AACjFvB,oBAAIQ,IAAJ,CAAS,EAAEC,QAAQ,CAAV,EAAaF,MAAMgB,QAAnB,EAAT;AACH,aAFD,EAEG,UAACb,GAAD;AAAA,uBAAS,MAAKC,mBAAL,CAAyBX,GAAzB,EAA8BU,GAA9B,CAAT;AAAA,aAFH;AAGH,S,QAEDc,kB,GAAqB,UAACzB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACrCC,yBAAGC,aAAH,CAAiBsB,OAAjB,CAAyB,EAAEJ,OAAO,EAAEC,IAAIvB,IAAIiB,MAAJ,CAAWM,EAAjB,EAAT,EAAzB,EAA2DhB,IAA3D,CAAgE,UAACiB,QAAD,EAAc;AAC1EvB,oBAAIQ,IAAJ,CAAS,EAAEC,QAAQ,CAAV,EAAaF,MAAMgB,QAAnB,EAAT;AACH,aAFD,EAEG,UAACb,GAAD;AAAA,uBAAS,MAAKC,mBAAL,CAAyBX,GAAzB,EAA8BU,GAA9B,CAAT;AAAA,aAFH;AAGH,S,QAEDgB,wB,GAA2B,UAAC3B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC3CC,yBAAGC,aAAH,CAAiBwB,OAAjB,CAAyB,EAAEN,OAAO,EAAEC,IAAIvB,IAAIiB,MAAJ,CAAWM,EAAjB,EAAT,EAAzB,EAA2DhB,IAA3D,CAAgE,UAACiB,QAAD,EAAc;AAC1E,oBAAIK,WAAW,EAAf;AACAA,yBAASC,IAAT,CAAcN,SAASO,UAAvB,EAAmCP,SAASQ,UAA5C,EAAwDR,SAASS,UAAjE,EAA6ET,SAASU,UAAtF;;AAEA/B,6BAAG0B,QAAH,CAAYf,OAAZ,CAAoB,EAAEQ,OAAO,EAAEa,WAAWN,QAAb,EAAT,EAApB,EAAwDtB,IAAxD,CAA6D,UAACsB,QAAD,EAAc;AACvEL,+BAAWY,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAed,QAAf,CAAX,CAAX;AACAA,6BAASK,QAAT,GAAoBA,QAApB;AACA5B,wBAAIQ,IAAJ,CAAS,EAAEC,QAAQ,CAAV,EAAaF,MAAMgB,QAAnB,EAAT;AACH,iBAJD;AAKH,aATD,EASG,UAACb,GAAD;AAAA,uBAAS,MAAKC,mBAAL,CAAyBX,GAAzB,EAA8BU,GAA9B,CAAT;AAAA,aATH;AAUH,S;;;;EArCwC4B,2B;;AAyC7C,IAAMC,aAAa,IAAI1C,uBAAJ,EAAnB;kBACe0C,U","file":"newsfeed_post.js","sourcesContent":["import BaseAPIController from \"./BaseAPIController\";\nimport provideUser from \"../providers/user\";\nimport db from '../db.js'\nexport class newsfeed_postController extends BaseAPIController {\n\n    createNewsfeedPost = (req, res, next) => {\n        db.newsfeed_post.create(req.body).then((data) => {\n            res.json({ status: 1, data: data })\n        }, (err) => this.handleErrorResponse(res, err))\n    }\n\n    getNewsfeedPost = (req, res, next) => {\n        db.newsfeed_post.findAll({ limit: parseInt(req.params.limit), offset: parseInt(req.params.limit) * parseInt(req.params.page - 1) }).then((data) => {\n            res.json({ status: 1, data: data })\n        }, (err) => this.handleErrorResponse(res, err))\n    }\n\n    updateNewsfeedPost = (req, res, next) => {\n        db.newsfeed_post.update(req.body, { where: { id: req.body.id } }).then((response) => {\n            res.json({ status: 1, data: response })\n        }, (err) => this.handleErrorResponse(res, err))\n    }\n\n    deleteNewsfeedPost = (req, res, next) => {\n        db.newsfeed_post.destroy({ where: { id: req.params.id } }).then((response) => {\n            res.json({ status: 1, data: response })\n        }, (err) => this.handleErrorResponse(res, err))\n    }\n\n    NewsfeedPostwithProducts = (req, res, next) => {\n        db.newsfeed_post.findOne({ where: { id: req.params.id } }).then((response) => {\n            let products = [];\n            products.push(response.product1ID, response.product2ID, response.product3ID, response.product4ID)\n\n            db.products.findAll({ where: { ProductID: products } }).then((products) => {\n                response = JSON.parse(JSON.stringify(response));\n                response.products = products\n                res.json({ status: 1, data: response })\n            })\n        }, (err) => this.handleErrorResponse(res, err))\n    }\n\n}\n\nconst controller = new newsfeed_postController();\nexport default controller;"]}