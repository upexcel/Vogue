{"version":3,"sources":["../../src/controllers/newsfeed_post.js"],"names":["newsfeed_postController","createNewsfeedPost","req","res","next","db","newsfeed_post","create","body","then","data","json","status","err","handleErrorResponse","getNewsfeedPost","count","findAll","limit","parseInt","params","offset","page","totalCount","updateNewsfeedPost","update","where","id","response","deleteNewsfeedPost","destroy","NewsfeedPostwithProducts","findOne","products","push","product1ID","product2ID","product3ID","product4ID","ProductID","JSON","parse","stringify","BaseAPIController","controller"],"mappings":"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","file":"newsfeed_post.js","sourcesContent":["import BaseAPIController from \"./BaseAPIController\";\nimport provideUser from \"../providers/user\";\nimport db from '../db.js'\nexport class newsfeed_postController extends BaseAPIController {\n\n    createNewsfeedPost = (req, res, next) => {\n        db.newsfeed_post.create(req.body).then((data) => {\n            res.json({ status: 1, data: data })\n        }, (err) => this.handleErrorResponse(res, err))\n    }\n\n    getNewsfeedPost = (req, res, next) => {\n        db.newsfeed_post.count({}).then((count) => {\n            db.newsfeed_post.findAll({ limit: parseInt(req.params.limit), offset: parseInt(req.params.limit) * parseInt(req.params.page - 1) }).then((data) => {\n                res.json({ status: 1, data: data, totalCount: count })\n            }, (err) => this.handleErrorResponse(res, err))\n        })\n    }\n\n    updateNewsfeedPost = (req, res, next) => {\n        db.newsfeed_post.update(req.body, { where: { id: req.body.id } }).then((response) => {\n            res.json({ status: 1, data: response })\n        }, (err) => this.handleErrorResponse(res, err))\n    }\n\n    deleteNewsfeedPost = (req, res, next) => {\n        db.newsfeed_post.destroy({ where: { id: req.params.id } }).then((response) => {\n            res.json({ status: 1, data: response })\n        }, (err) => this.handleErrorResponse(res, err))\n    }\n\n    NewsfeedPostwithProducts = (req, res, next) => {\n        db.newsfeed_post.findOne({ where: { id: req.params.id } }).then((response) => {\n            let products = [];\n            products.push(response.product1ID, response.product2ID, response.product3ID, response.product4ID)\n\n            db.products.findAll({ where: { ProductID: products } }).then((products) => {\n                response = JSON.parse(JSON.stringify(response));\n                response.products = products\n                res.json({ status: 1, data: response })\n            })\n        }, (err) => this.handleErrorResponse(res, err))\n    }\n\n}\n\nconst controller = new newsfeed_postController();\nexport default controller;"]}